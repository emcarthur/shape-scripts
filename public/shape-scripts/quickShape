#!/bin/bash

startdir=$(pwd)
cflag=
cval=
rflag=
rval=
fflag=
fval=
oflag=
oval=
dflag=
sflag=
yflag=
zflag=
nflag=
hflag=
iflag=
jflag=
kflag=
aflag=

usage="\nquickShape - Evonne McArthur - updated 05/2016\n\nRuns ShapeMap pipeline or calculates depth on specific regions within the entire transcriptome\n\nUsage:\n  quickShape -c <int> -r <int>-<int> [other options]\n\nMust specify:\n  -c          chromosome of region of interest as an integer\n  -r          nucleotide start and stop positions for region of interest as <int>-<int>\n\nOther options:\n  -o          output folder name (default: "output")\n  -d          ONLY output depth of the region, will not run shapemap pipeline\n  -f          fasta file for region of interest(if not specified will use region from hg19 or hg38)\n  -s          Use "AlmostQuad" sonicated data\n  -y          use yoruban data from 19098\n  -z          use yoruban data from 19099\n  -h          Use 07037-only\n  -i          Use 07037-only sonicated\n  -j          use 12003-only\n  -k          use 12003-only sonicated\n  -n          do NOT use denatured data to determine normalized reactivities\n  -a          use STAR alignment version of file with hg38"

# PARSE FLAGS

while getopts "c:r:o:df:syznhijka" OPTION
do
    case $OPTION in
        c)
	    cflag=1
	    cval=$OPTARG
            ;;
        r)
            rflag=1
	    rval=$OPTARG
            ;;
	f)
	    fflag=1
	    fval=$OPTARG
            ;;
	o)
	    oflag=1
            oval=$OPTARG
	    ;;
	s)
	    sflag=1
	    ;;
	d)
	    dflag=1
	    ;;
	s)
	    sflag=1
	    ;;
	y)
	    yflag=1
	    ;;
	z)
	    zflag=1
	    ;;
	n)
	    nflag=1
	    ;;
	h)
	    hflag=1
	    ;;
	i)
	    iflag=1
	    ;;
	j)
	    jflag=1
	    ;;
	k)
	   kflag=1
	   ;;
	a)
	   aflag=1
	   ;;
        \?)
            echo -e "$usage"
            exit 2
            ;;
    esac
done

# IF NO CHROMOSOME IS PROVIDED EXIT
if [ -z "$cflag" ]; then
	echo "ERROR: Did not provide chromosome information!"
	echo -e "$usage"
	exit
fi

# IF NO REGION IS PROVIDED EXIT
if [ -z "$rflag" ]; then
	echo "ERROR: Did not provide region information!"
	echo -e "$usage"
	exit
fi

# INITIALIZE UNIQUE FOLDER NAME FOR OUTPUT
outfileString="chr"$cval:$rval


# ASSIGN plus, minus, AND denatured VARIABLES TO THE RIGHT FILE GIVEN THE FLAGS

if [ -z "$aflag" ]; then
	# IF HG19
	genomebuild="hg19"
	outfileString=$outfileString"_hg19"
	if [ -z "$sflag" ] && [ -z "$yflag" ] && [ -z "$zflag" ] && [ -z "$hflag" ] && [ -z "$iflag" ] && [ -z "$jflag" ] && [ -z "$kflag" ]; then
		plus="PR"
	        minus="MR"
	        denatured="DC"
		outfileString=$outfileString"_combinedRefolded"
	elif [ ! -z "$sflag" ]; then
	       	plus="PS"
	        minus="MS"
	        denatured="DC"
		outfileString=$outfileString"_combinedSonicated"
	elif [ ! -z "$yflag" ]; then
	        plus="19098PR"
	        minus="19098MR"
	        denatured="19098DC"
		outfileString=$outfileString"_19098Refolded"
	elif [ ! -z "$hflag" ]; then         
	        plus="NA07037_P"
	        minus="NA07037_M"
		denatured="NA07037_DC"
		outfileString=$outfileString"_NA07037Refolded"
	elif [ ! -z "$iflag" ]; then
	        plus="NA07037_PS"
	        minus="NA07037_MS"
	        denatured="NA07037_DC"
		outfileString=$outfileString"_NA07307Sonicated"
	elif [ ! -z "$jflag" ]; then
	        plus="NA12003_P"
	        minus="NA12003_M"
	        denatured="NA12003_DC"
		outfileString=$outfileString"_NA12003Refolded"
	elif [ ! -z "$kflag" ]; then
	        plus="NA12003_PS"
	        minus="NA12003_MS"
	        denatured="NA12003_DC"
		outfileString=$outfileString"_NA12003Sonicated"
	elif [ ! -z "$zflag" ]; then
	        plus="19099PR"
	        minus="19099MR"
	        denatured="19099DC"
		outfileString=$outfileString"_19099Refolded"
	fi
else
	# IF HG38
	genomebuild="hg38"
	outfileString=$outfileString"_hg38"
	if [ ! -z "$yflag" ]; then
                plus="hg38_STAR_default_19098Plus.Aligned.out"
                minus="hg38_STAR_default_19098Min.Aligned.out"
                denatured="hg38_STAR_default_19098DC.Aligned.out"
		outfileString=$outfileString"_19098Refolded"
        elif [ ! -z "$hflag" ]; then
                plus="STAR_hg38_07037_PR.Aligned.out"
                minus="STAR_hg38_07037_MR.Aligned.out"
                denatured="STAR_hg38_07037_DC.Aligned.out"
		outfileString=$outfileString"_NA07037Refolded"
        elif [ ! -z "$iflag" ]; then
                plus="STAR_hg38_07037_PS.Aligned.out"
                minus="STAR_hg38_07037_MS.Aligned.out"
                denatured="STAR_hg38_07037_DC.Aligned.out"
		outfileString=$outfileString"_NA07037Sonicated"
        elif [ ! -z "$jflag" ]; then
		echo "12003 STAR alignment with hg38 not available yet"
                exit
		#plus="NA12003_P"
                #minus="NA12003_M"
                #denatured="NA12003_DC"
        elif [ ! -z "$kflag" ]; then
		echo "12003 STAR alignment with hg38 not available yet"
                exit
		#plus="NA12003_PS"
                #minus="NA12003_MS"
                #denatured="NA12003_DC"
        elif [ ! -z "$zflag" ]; then
                plus="hg38_STAR_default_19099Plus.Aligned.out"
                minus="hg38_STAR_default_19099Min.Aligned.out"
                denatured="hg38_STAR_default_19099DC.Aligned.out"
		outfileString=$outfileString"_19099Refolded"
        elif [ ! -z "$sflag" ]; then
		plus="hg38_STAR_default_PS_12003and07037.Aligned.out"
                minus="hg38_STAR_default_MS_12003and07037.Aligned.out"
                denatured="hg38_STAR_default_DC_12003and07037.Aligned.out"
		outfileString=$outfileString"_combinedSonicated"
	else
		plus="hg38_STAR_default_PR_12003and07037.Aligned.out"
                minus="hg38_STAR_default_MR_12003and07037.Aligned.out"
                denatured="hg38_STAR_default_DC_12003and07037.Aligned.out"
		outfileString=$outfileString"_combinedRefolded"	
	fi


fi

# CHECK IF THIS COMMAND IS RUNNING AND EXIT IF IT IS (MAKE OUTPUT FILE IF IT'S NOT)
if [ -d "/home/shared/shape-scripts/$outfileString/" ]; then
	echo "A version of this command is already running (or exists in the shape-scripts folder). Exiting.."
	exit
else
	mkdir /home/shared/shape-scripts/$outfileString/
fi


if [ ! -z "$dflag" ]; then

	# IF D FLAG IS SPECIFIED CALCULATE AND OUTPUT DEPTH
	echo "Calculating depth of chr: $cval pos: $rval ... "
	samtools depth -r chr$cval:$rval /home/shared/shape-scripts/runFiles/$plus.sorted.bam > /home/shared/shape-scripts/$outfileString/$plus.depth
	echo -e "\nPlus depth:"
	awk '{if(min==""){min=max=$3}; if($3>max) {max=$3}; if($3< min) {min=$3}; total+=$3; count+=1} END {print "  Average: "total/count, "\tMin: " min, "\tMax: " max}' /home/shared/shape-scripts/$outfileString/$plus.depth

	samtools depth -r chr$cval:$rval /home/shared/shape-scripts/runFiles/$minus.sorted.bam > /home/shared/shape-scripts/$outfileString/$minus.depth
	echo "Minus depth:"
        awk '{if(min==""){min=max=$3}; if($3>max) {max=$3}; if($3< min) {min=$3}; total+=$3; count+=1} END {print "  Average: "total/count, "\tMin: " min, "\tMax: " max}' /home/shared/shape-scripts/$outfileString/$minus.depth

	samtools depth -r chr$cval:$rval /home/shared/shape-scripts/runFiles/$denatured.sorted.bam > /home/shared/shape-scripts/$outfileString/$denatured.depth
	echo "Denatured depth:"
        awk '{if(min==""){min=max=$3}; if($3>max) {max=$3}; if($3< min) {min=$3}; total+=$3; count+=1} END {print "  Average: "total/count, "\tMin: " min, "\tMax: " max}' /home/shared/shape-scripts/$outfileString/$denatured.depth
	
	echo -e "\nDepth at nucleotide level also output"

else
	# IF D FLAG IS NOT SPECIFIED START SHAPEMAP
	echo "Setting up files to run ShapeMap..."
	
	# EXTRACTING LINES IN SAM FILE FROM REGION TO ANOTHER FILE
	samtools view /home/shared/shape-scripts/runFiles/$plus.sorted.bam chr$cval:$rval > /home/shared/shape-scripts/$outfileString/outPR.sam
	samtools view /home/shared/shape-scripts/runFiles/$minus.sorted.bam chr$cval:$rval > /home/shared/shape-scripts/$outfileString/outMR.sam
	samtools view /home/shared/shape-scripts/runFiles/$denatured.sorted.bam chr$cval:$rval > /home/shared/shape-scripts/$outfileString/outDC.sam
	
	# CONVERTING SAM FORMATED LINES TO FASTA FORMAT
	cat /home/shared/shape-scripts/$outfileString/outPR.sam | awk '{print "@"$1"\n"$10"\n+\n"$11}' > /home/shared/shape-scripts/$outfileString/PR.fastq
	cat /home/shared/shape-scripts/$outfileString/outMR.sam | awk '{print "@"$1"\n"$10"\n+\n"$11}' > /home/shared/shape-scripts/$outfileString/MR.fastq
	cat /home/shared/shape-scripts/$outfileString/outDC.sam | awk '{print "@"$1"\n"$10"\n+\n"$11}' > /home/shared/shape-scripts/$outfileString/DC.fastq
	
	# REMOVE SAMFILE SUBSETS
	rm /home/shared/shape-scripts/$outfileString/out*.sam
	
	# CREATE FASTA FILE IF NONE SPECIFIED OR FORMAT EXISTING FASTA FILE IF SPECIFIED
	echo ">quickShape" > /home/shared/shape-scripts/$outfileString/quickShape.fa

	if [ ! -z "$fflag" ]; then
		echo "fasta file specified"
		tail -n +2 $fval >> /home/shared/shape-scripts/$outfileString/quickShape.fa
		
	else
		echo "fasta file not specified, creating file from hg19 or hg38 sequence"
		samtools faidx /home/shared/shape-scripts/runFiles/$genomebuild.fa "chr"$cval:$rval > /home/shared/shape-scripts/$outfileString/tmp.fa
		tail -n +2 /home/shared/shape-scripts/$outfileString/tmp.fa  >> /home/shared/shape-scripts/$outfileString/quickShape.fa
		rm /home/shared/shape-scripts/$outfileString/tmp.fa
	fi
	
	# CHANGE DIRECTORY TO OUTPUT FILE AND START SHAPEMAP	
	cd /home/shared/shape-scripts/$outfileString/
	
	if [ ! -z "$nflag" ]; then
		echo "Starting ShapeMap Pipeline without denatured..."
		/home/shared/ShapeMapper_noDenatured/ShapeMapper.py /home/shared/shape-scripts/runFiles/config_file.cfg
                rm -rf temp

	else
		echo "Starting ShapeMap Pipeline with denatured..."
		ShapeMapper.py /home/shared/shape-scripts/runFiles/config_file.cfg
		rm -rf temp
	fi	

	# RETURN TO WORKING DIRECTORY AND CLEAN UP FILES
	cd $startdir
	mv /home/shared/shape-scripts/$outfileString/log.txt .
	rm /home/shared/shape-scripts/$outfileString/temp_config.pickle
	rm /home/shared/shape-scripts/$outfileString/*.fastq
	rm /home/shared/shape-scripts/$outfileString/quickShape.fa
	mv /home/shared/shape-scripts/$outfileString/output/* /home/shared/shape-scripts/$outfileString/
	rm -rf /home/shared/shape-scripts/$outfileString/output/
fi

# MOVE FILES TO WORKING DIRECTORY
if [ ! -z "$oflag" ]; then
	mv /home/shared/shape-scripts/$outfileString ./$oval
else
	mv /home/shared/shape-scripts/$outfileString ./$outfileString
fi
